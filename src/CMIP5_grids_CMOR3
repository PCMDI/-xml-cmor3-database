table_id: "Table grids"	


cmor_version: 2.0	# version of CMOR that can read this table
cf_version:   1.4	# version of CF that output conforms to
project_id:   "CMIP5"	# project id
table_date:   "12 November 2010"	# date this table was constructed

missing_value: 1.e20	# value used to indicate a missing value
                          #   in arrays output by netCDF as 32-bit IEEE 
                          #   floating-point numbers (float or real)

baseURL: "http://cmip-pcmdi.llnl.gov/CMIP5/dataLocation"	
product: "output"	

required_global_attributes: [ "creation_date","tracking_id","forcing","model_id","parent_experiment_id","parent_experiment_rip","branch_time","contact","institute_id" ]	# space separated required global attribute 

expt_id_ok:
( { title: " 10- or 30-year run initialized in year XXXX", id: "decadalXXXX"},
  { title: "volcano-free hindcasts", id: "noVolcXXXX" },
  { title: "prediction with 2010 volcano", id: "volcIn2010" },
  { title: "pre-industrial control", id: "piControl" },
  { title: "Historical", id: "historical" },
  { title: "mid-Holocene", id: "midHolocene" },
  { title: "last glacial maximum", id: "lgm" },
  { title: "last millennium", id: "past1000" },
  { title: "RCP4.5", id: "rcp45" },
  { title: "RCP8.5", id: "rcp85" },
  { title: "RCP2.6", id: "rcp26" },
  { title: "RCP6", id: "rcp60" },
  { title: "ESM pre-industrial control", id: "esmControl" },
  { title: "ESM historical", id: "esmHistorical" },
  { title: "ESM RCP8.5", id: "esmrcp85" },
  { title: "ESM fixed climate 1", id: "esmFixClim1" },
  { title: "ESM fixed climate 2", id: "esmFixClim2" },
  { title: "ESM feedback 1", id: "esmFdbk1" },
  { title: "ESM feedback 2", id: "esmFdbk2" },
  { title: "1 percent per year CO2", id: "1pctCO2" },
  { title: "abrupt 4XCO2", id: "abrupt4xCO2" },
  { title: "natural-only", id: "historicalNat" },
  { title: "GHG-only", id: "historicalGHG" },
  { title: "AMIP", id: "amip" },
  { title: "2030 time-slice", id: "sst2030" },
  { title: "control SST climatology", id: "sstClim" },
  { title: "CO2 forcing", id: "sstClim4xCO2" },
  { title: "all aerosol forcing", id: "sstClimAerosol" },
  { title: "sulfate aerosol forcing", id: "sstClimSulfate" },
  { title: "4xCO2 AMIP", id: "amip4xCO2" },
  { title: "AMIP plus patterned anomaly", id: "amipFuture" },
  { title: "aqua planet control", id: "aquaControl" },
  { title: "4xCO2 aqua planet", id: "aqua4xCO2" },
  { title: "aqua planet plus 4K anomaly", id: "aqua4K" },
  { title: "AMIP plus 4K anomaly", id: "amip4K" },


  {} )
mapping_entry: {  sample_user_mapping: {
parameter1: "false_easting"	
parameter2: "false_northing"	
coordinates: "rlon rlat"	
}
}
axis_entry:{  i_index: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------
  out_name:         "i"	
  units:            "1"	
  long_name:        "cell index along first dimension"	
  type:           "integer"	
#----------------------------------    
#
#
#============
    }, j_index: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------
  out_name:         "j"	
  units:            "1"	
  long_name:        "cell index along second dimension"	
  type:           "integer"	
#----------------------------------    
#
#
#============
    }, k_index: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------
  out_name:         "k"	
  units:            "1"	
  long_name:        "cell index along third dimension"	
  type:           "integer"	
#----------------------------------    
#
#============
    }, l_index: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------
  out_name:         "l"	
  units:            "1"	
  long_name:        "cell index along fourth dimension"	
  type:           "integer"	
#----------------------------------    
#
#============
    }, m_index: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------
  out_name:         "m"	
  units:            "1"	
  long_name:        "cell index along fifth dimension"	
  type:           "integer"	
#----------------------------------    
#
#============
    }, x: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------    
  standard_name:    "projection_x_coordinate"	
  units:            "m"	
  long_name:        "x coordinate of projection"	
  axis: "X"	
  type:             "double"	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
#
#============
    }, y: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------    
  standard_name:    "projection_y_coordinate"	
  units:            "m"	
  long_name:        "y coordinate of projection"	
  axis: "Y"	
  type:             "double"	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
#
#============
    }, x_deg: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------    
  out_name:         "x"	
  standard_name:    "projection_x_coordinate"	
  units:            "degrees"	
  long_name:        "x coordinate of projection"	
  axis: "X"	
  type:             "double"	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
#
#============
    }, y_deg: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------    
  out_name:         "y"	
  standard_name:    "projection_y_coordinate"	
  units:            "degrees"	
  long_name:        "y coordinate of projection"	
  axis: "Y"	
  type:             "double"	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
#
#============
    }, grid_latitude: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------    
  standard_name:    "grid_latitude"	
  units:            "degrees"	
  long_name:        "latitude in rotated pole grid"	
  axis: "Y"	
  type:             "double"	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
  out_name:         "rlat"	
#
#============
    }, grid_longitude: {
#============
#
#------------
#
# Axis attributes:
#----------------------------------    
  standard_name:    "grid_longitude"	
  units:            "degrees"	
  long_name:        "longitude in rotated pole grid"	
  axis: "X"	
  type:             "double"	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
  out_name:         "rlon"	
#
#============
    }, vertices: {
#============
#
#------------
#
#============
} }  variable_entry:{  longitude: {
#============
#----------------------------------    
  standard_name:    "longitude"	
  units:            "degrees_east"	
  long_name:        "longitude coordinate"	
  dimensions:      [ "longitude","latitude" ]	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
  out_name:         "lon"	
  valid_min:        0.	# CMOR will add n*360 to input values
                               # (where n is an integer) to ensure 
                               #  longitudes are in proper range.
  valid_max:        360.	#  see above comment.
#----------------------------------    
#
#
#============
    }, latitude: {
#============
#----------------------------------    
  standard_name:    "latitude"	
  units:            "degrees_north"	
  long_name:        "latitude coordinate"	
  dimensions:      [ "longitude","latitude" ]	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
  out_name:         "lat"	
  valid_min:        -90.	
  valid_max:        90.	
#----------------------------------    
#
#
#============
    }, vertices_longitude: {
#============
#----------------------------------    
  units:            "degrees_east"	
  dimensions:      [ "vertices","longitude","latitude" ]	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
  out_name:         "lon_vertices"	
  valid_min:        0.	# CMOR will add n*360 to input values
                               # (where n is an integer) to ensure 
                               #  longitudes are in proper range.
  valid_max:        360.	#  see above comment.
#----------------------------------    
#
#
#============
    }, vertices_latitude: {
#============
#----------------------------------    
  units:            "degrees_north"	
  dimensions:      [ "vertices","longitude","latitude" ]	
#----------------------------------    
#
# Additional axis information:
#----------------------------------    
  out_name:         "lat_vertices"	
  valid_min:        -90.	
  valid_max:        90.	
#----------------------------------    
#
#
 } }
